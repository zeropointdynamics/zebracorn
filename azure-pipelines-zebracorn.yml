trigger:
- master

jobs:

- job: ManyLinux
  strategy:
    matrix:
      # The manylinux2010 wheels are eligible for the manylinux1 tag,
      # so we don't need to build manylinux1 at this time.
      # 32Bit:
      #   arch: i686
      #   plat: manylinux1_i686
      #   image: quay.io/pypa/manylinux1_i686
      #   python.architecture: x86
      #   package_name: zebracorn
      #   PYTHON: /opt/python/cp36-cp36m/bin/python
      # 64Bit:
      #   arch: x86_64
      #   plat: manylinux1_x86_64
      #   image: quay.io/pypa/manylinux1_x86_64
      #   python.architecture: x64
      #   package_name: zebracorn
      #   PYTHON: /opt/python/cp36-cp36m/bin/python
      32Bit2010:
        arch: i686
        plat: manylinux2010_i686
        image: quay.io/pypa/manylinux2010_i686
        python.architecture: x86
        package_name: zebracorn
        PYTHON: /opt/python/cp36-cp36m/bin/python
      64Bit2010:
        arch: x86_64
        plat: manylinux2010_x86_64
        image: quay.io/pypa/manylinux2010_x86_64
        python.architecture: x64
        package_name: zebracorn
        PYTHON: /opt/python/cp36-cp36m/bin/python
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
      displayName: 'Use Python 3.6'
    - script: |
        set -ex
        docker run -e PLAT=$(plat) -e package_name=$(package_name) --rm -v `pwd`:/repo $(image) /bin/bash -c "cd repo && \
        $(PYTHON) -m venv ~/.venv/zebracorn
        source ~/.venv/zebracorn/bin/activate
        python -m pip install --upgrade pip && \
        python -m pip install --upgrade setuptools wheel && \
        cd bindings/python && python setup.py bdist_wheel && \
        mkdir -p /repo/wheelhouse && \
        for whl in dist; do auditwheel repair --plat $(plat) dist/*.whl -w /repo/wheelhouse/ $whl; done && \
        cd ../.. && \
        yum -y install libcmocka-devel && \
        make test"
        ls -alh
        mkdir -p dist
        cp wheelhouse/*.whl dist/
      displayName: 'Build / Test / Artifact creation'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'artifact_$(Agent.OS)_$(Agent.JobName)_$(python.architecture)'
        targetPath: 'dist'

- job: MacOS64
  pool:
    vmImage: 'macOS-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
    displayName: 'Use Python 3.6'
  - script: |
      python -m pip install --upgrade pip
      python -m pip install wheel

    displayName: 'Install dependencies'
  - script: |
      mkdir -p wheelhouse
      cd bindings/python && python setup.py bdist_wheel
      cp dist/*.whl ../../wheelhouse/
      cd ../..
      brew install cmocka
      ln -s /usr/bin/gobjcopy /usr/local/bin/objcopy
      make test
    displayName: 'Build / Test / Artifact creation'
  - task: CopyFiles@2
    inputs:
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'dist'
      publishLocation: 'Container'

- job: Windows
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
        32bit:
          PYTHON_VERSION: '3.6'
          PYTHON_ARCH: 'x86'
          PLATFORM: 'Win32'
        64bit:
          PYTHON_VERSION: '3.6'
          PYTHON_ARCH: 'x64'
          PLATFORM: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: $(PYTHON_ARCH)
      addToPath: true
    displayName: 'Use Python $(PYTHON_VERSION) $(PYTHON_ARCH)'
  - script: python -m pip install --upgrade pip setuptools wheel pytest
    displayName: 'Install dependencies'
  - task: VSBuild@1
    inputs:
      solution: 'msvc\*.sln'
      vsVersion: '16.0' 
      platform: $(PLATFORM)
      configuration: Release
      clean: true
    displayName: 'Build / Artifact creation'
  - powershell: |
      Remove-Item .\bindings\python\unicorn\lib -Recurse -ErrorAction Ignore
      Remove-Item .\bindings\python\unicorn\include -Recurse -ErrorAction Ignore
      New-Item -ItemType Directory -Force -Path .\bindings\python\unicorn\lib
      New-Item -ItemType Directory -Force -Path .\bindings\python\unicorn\include
      New-Item -ItemType Directory -Force -Path .\wheelhouse
      cp msvc\distro\$(PLATFORM)\unicorn.* bindings\python\unicorn\lib\
      cp -r msvc\distro\include\unicorn bindings\python\unicorn\include\
      cd bindings\python
      $env:LIBUNICORN_PATH = "LIBUNICORN_ALREADY_BUILT"
      python setup.py bdist_wheel
      cp dist\*.whl ..\..\wheelhouse\
      cd ..\..
      $env:PATH = "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin;" + $env:PATH
      $env:CROSS = "mingw32-"
      dir C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin\\
      make -C bindings test
    displayName: 'Python / Artifact creation'
  - powershell: |
      # pytest
    displayName: 'pytest'
  - task: CopyFiles@2
    inputs:
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'dist'
      publishLocation: 'Container'
